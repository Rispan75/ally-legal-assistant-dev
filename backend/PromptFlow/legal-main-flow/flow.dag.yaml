$schema: https://azuremlschemas.azureedge.net/promptflow/latest/Flow.schema.json
environment:
  python_requirements_txt: requirements.txt
inputs:
  chat_history:
    type: list
    is_chat_history: true
    default: []
  question:
    type: string
    is_chat_input: true
    default: "(a)\tThe Contract shall be governed by and construed in accordance
      with the laws of Singapore, without reference to its conflict of laws
      rules.    (b)\tFor Purchase Orders issued to Sellers incorporated in
      Singapore, unless otherwise specified in the Purchase Order, the parties
      submit to the jurisdiction of the courts of Singapore. "
  query_type:
    type: int
    default: 2
  group:
    type: list
    default:
    - 22a229bd-c7a2-49d0-9eaa-e1fc888daac6
    - 2846190d-05dc-4048-90bc-7e236f34d84b
    - 62edbd7b-8d46-4d2c-a5a1-da5b78ba1d38
    - be8ca378-bc74-46c1-b922-e7f552486ede
  language:
    type: string
    default: English
  filename:
    type: string
    default: contract-for-the-purchase-of-goods-and-services.docx
outputs:
  answer:
    type: string
    reference: ${aggregation.output}
    is_chat_output: true
nodes:
- name: list_policys
  type: python
  source:
    type: code
    path: list_policys.py
  inputs:
    searchconnection: ally
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 0
- name: summary_document
  type: python
  source:
    type: code
    path: summary_document.py
  inputs:
    input_text: ${inputs.question}
    policy_list: ${list_policys.output}
    ally: ally
- name: selection_summary
  type: python
  source:
    type: code
    path: documen_summary.py
  inputs:
    policy_list: ${search_policy.output}
    input_text: ${inputs.question}
    ally: ally
    language: ${inputs.language}
- name: search_policy
  type: python
  source:
    type: code
    path: search_policy.py
  inputs:
    searchconnection: ally
    embeding: ${python_text_embedding_search.output}
    query: ${inputs.question}
    groups: ${inputs.group}
- name: aggregation
  type: python
  source:
    type: code
    path: aggregation.py
  inputs:
    input1: ${selection_summary.output}
    input2: ${summary_document.output}
    input3: ${summary_full_doc.output}
    input4: ${ask_result_format.output}
    input5: ${check_index.output}
  aggregation: false
- name: summary_full_doc
  type: python
  source:
    type: code
    path: summary_full_doc.py
  inputs:
    input_text: ${inputs.question}
    ally: ally
  activate:
    when: ${inputs.query_type}
    is: 1
- name: search_doc
  type: python
  source:
    type: code
    path: search_doc.py
  inputs:
    searchconnection: ally
    embedinginput: ${python_text_embedding.output}
    query: ${inputs.question}
    filename: ${inputs.filename}
    groups: ${inputs.group}
- name: ask_result_format
  type: python
  source:
    type: code
    path: ask_result_format.py
  inputs:
    query: ${inputs.question}
    search_result_list: ${search_doc.output}
    ally: ally
    language: ${inputs.language}
  aggregation: false
- name: python_text_embedding
  type: python
  source:
    type: code
    path: python_text_embedding.py
  inputs:
    ally: ally
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 3
- name: python_text_embedding_search
  type: python
  source:
    type: code
    path: python_text_embedding.py
  inputs:
    ally: ally
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 2
- name: check_index
  type: python
  source:
    type: code
    path: check_index.py
  inputs:
    filename: ${inputs.filename}
    groups: ${inputs.group}
    searchconnection: ally
  activate:
    when: ${inputs.query_type}
    is: 99
- name: prompt_node_9e7r
  type: prompt
  source:
    type: code
    path: prompt_node_9e7r.jinja2
  inputs: {}
