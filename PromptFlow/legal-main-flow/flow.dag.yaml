$schema: https://azuremlschemas.azureedge.net/promptflow/latest/Flow.schema.json
environment:
  python_requirements_txt: requirements.txt
inputs:
  chat_history:
    type: list
    is_chat_history: true
    default: []
  question:
    type: string
    is_chat_input: true
    default: "(a)\tThe Contract shall be governed by and construed in accordance
      with the laws of Singapore, without reference to its conflict of laws
      rules.    (b)\tFor Purchase Orders issued to Sellers incorporated in
      Singapore, unless otherwise specified in the Purchase Order, the parties
      submit to the jurisdiction of the courts of Singapore.    (c)\tFor
      Purchase Orders issued to Sellers other than those described in Clause
      28(b) above, unless otherwise specified in the Purchase Order, any dispute
      arising out of or in connection with the Contract, including any question
      regarding its existence, validity or termination, shall be referred to and
      finally resolved by arbitration in Singapore in accordance with the
      Arbitration Rules of the Singapore International Arbitration Centre (SIAC)
      for the time being in force, which rules are deemed to be incorporated by
      reference into this Clause. The arbitration proceedings shall be conducted
      in English. The arbitration award shall be enforceable before a court of
      competent jurisdiction.    (d)\tFor the avoidance of doubt, parties are
      not precluded from seeking injunctive relief from a court of competent
      jurisdiction in relation to any breach or threatened breach of the
      Contract to avoid irreparable harm or injury.    "
  query_type:
    type: int
    default: 2
outputs:
  answer:
    type: string
    reference: ${aggregation.output}
    is_chat_output: true
nodes:
- name: list_policys
  type: python
  source:
    type: code
    path: list_policys.py
  inputs:
    searchconnection: azuresearch
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 0
- name: summary_document
  type: python
  source:
    type: code
    path: summary_document.py
  inputs:
    openai: lioropenaitest
    input_text: ${inputs.question}
    policy_list: ${list_policys.output}
- name: selection_summary
  type: python
  source:
    type: code
    path: documen_summary.py
  inputs:
    openai: lioropenaitest
    policy_list: ${search_policy.output}
    input_text: ${inputs.question}
- name: search_policy
  type: python
  source:
    type: code
    path: search_policy.py
  inputs:
    searchconnection: azuresearch
    embeding: ${text_embedding.output}
    query: ${inputs.question}
- name: text_embedding
  type: python
  source:
    type: package
    tool: promptflow.tools.embedding.embedding
  inputs:
    connection: lioropenaitest
    deployment_name: ada002
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 2
- name: aggregation
  type: python
  source:
    type: code
    path: aggregation.py
  inputs:
    input1: ${selection_summary.output}
    input2: ${summary_document.output}
    input3: ${summary_full_doc.output}
    input4: ${ask_result_format.output}
  aggregation: false
- name: summary_full_doc
  type: python
  source:
    type: code
    path: summary_full_doc.py
  inputs:
    openai: lioropenaitest
    input_text: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 1
- name: query_embedding
  type: python
  source:
    type: package
    tool: promptflow.tools.embedding.embedding
  inputs:
    connection: lioropenaitest
    deployment_name: ada002
    input: ${inputs.question}
  activate:
    when: ${inputs.query_type}
    is: 3
- name: search_doc
  type: python
  source:
    type: code
    path: search_doc.py
  inputs:
    searchconnection: azuresearch
    embedinginput: ${query_embedding.output}
    query: ${inputs.question}
- name: ask_result_format
  type: python
  source:
    type: code
    path: ask_result_format.py
  inputs:
    query: ${inputs.question}
    search_result_list: ${search_doc.output}
    openai: lioropenaitest
